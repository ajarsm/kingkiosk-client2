import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart' as webrtc;
import 'package:get/get.dart';
import 'package:sip_ua/sip_ua.dart';
import '../services/storage_service.dart';
import '../core/utils/app_constants.dart';

/// Service for managing SIP UA connections
class SipService extends GetxService implements SipUaHelperListener {
  // Dependencies
  final StorageService _storageService;
  
  // SIP UA instance
  late final SIPUAHelper _helper;
  
  // Service state
  final isRegistered = false.obs;
  final currentCall = Rx<Call?>(null);
  final lastError = ''.obs;
  final callState = ''.obs;
  final isLocalVideoEnabled = true.obs; // Track video state
  final isCallMuted = false.obs; // Track mute state
  
  // Device lists for media selection
  final audioInputs = <webrtc.MediaDeviceInfo>[].obs;
  final videoInputs = <webrtc.MediaDeviceInfo>[].obs;
  final audioOutputs = <webrtc.MediaDeviceInfo>[].obs;
  
  // Selected devices
  final selectedAudioInput = Rx<webrtc.MediaDeviceInfo?>(null);
  final selectedVideoInput = Rx<webrtc.MediaDeviceInfo?>(null);
  final selectedAudioOutput = Rx<webrtc.MediaDeviceInfo?>(null);
  
  // Settings
  final serverHost = ''.obs;
  final deviceName = ''.obs; // SIP contact uses this as username
  final enabled = false.obs;
  
  // Constructor
  SipService(this._storageService) {
    _helper = SIPUAHelper();
  }
  
  /// Initialize the service
  Future<SipService> init() async {
    try {
      // Load settings
      serverHost.value = _storageService.read<String>(AppConstants.keySipServerHost) ?? 
                          AppConstants.defaultSipServerHost;
      enabled.value = _storageService.read<bool>(AppConstants.keySipEnabled) ?? false;
      
      // Register for SIP UA events
      _helper.addSipUaHelperListener(this);
      
      // Initialize device lists
      await loadDevices();
      
      // Load selected device IDs from storage and set selected devices
      await loadSelectedDevices();
      
      // Auto-register if enabled
      if (enabled.value) {
        Future.delayed(Duration(seconds: 2), () {
          register();
        });
      }
      
      return this;
    } catch (e) {
      debugPrint('Error initializing SipService: $e');
      return this;
    }
  }
  
  /// Cleanup on service destruction
  void dispose() {
    try {
      unregister();
    } catch (e) {
      debugPrint('Error unregistering SIP: $e');
    }
    _helper.removeSipUaHelperListener(this);
  }
  
  /// Register with SIP server
  Future<bool> register() async {
    if (serverHost.value.isEmpty || deviceName.value.isEmpty) {
      lastError.value = 'Missing server host or device name';
      return false;
    }
    
    try {
      final UaSettings settings = UaSettings();
      
      // Sanitize device name for SIP use (no spaces or special characters)
      final String sanitizedName = deviceName.value
          .replaceAll(RegExp(r'\s+'), '-')
          .replaceAll(RegExp(r'[^A-Za-z0-9-]'), '')
          .toLowerCase();
      
      // Set server settings
      settings.webSocketUrl = 'wss://${serverHost.value}/ws';
      settings.displayName = deviceName.value;
      settings.userAgent = 'KingKiosk';
      settings.uri = '${sanitizedName}@${serverHost.value}';
      settings.authorizationUser = sanitizedName;
      settings.password = '';
      
      // Other settings
      settings.dtmfMode = DtmfMode.INFO;
      
      _helper.start(settings);
      return true;
    } catch (e) {
      lastError.value = 'Failed to register: $e';
      return false;
    }
  }
  
  /// Unregister from SIP server
  Future<bool> unregister() async {
    try {
      _helper.stop();
      return true;
    } catch (e) {
      lastError.value = 'Failed to unregister: $e';
      return false;
    }
  }
  
  /// Load available media devices
  Future<void> loadDevices() async {
    try {
      final devices = await webrtc.navigator.mediaDevices?.enumerateDevices() ?? [];
      
      audioInputs.value = devices.where(
        (device) => device.kind == 'audioinput'
      ).toList();
      
      videoInputs.value = devices.where(
        (device) => device.kind == 'videoinput'
      ).toList();
      
      audioOutputs.value = devices.where(
        (device) => device.kind == 'audiooutput'
      ).toList();
      
      debugPrint('Device counts: Audio inputs: ${audioInputs.length}, Video inputs: ${videoInputs.length}, Audio outputs: ${audioOutputs.length}');
    } catch (e) {
      debugPrint('Error enumerating devices: $e');
    }
  }
  
  /// Load selected devices from storage
  Future<void> loadSelectedDevices() async {
    final savedAudioInputId = _storageService.read<String>(AppConstants.keySelectedAudioInput);
    final savedVideoInputId = _storageService.read<String>(AppConstants.keySelectedVideoInput);
    final savedAudioOutputId = _storageService.read<String>(AppConstants.keySelectedAudioOutput);
    
    if (savedAudioInputId != null && audioInputs.isNotEmpty) {
      selectedAudioInput.value = audioInputs.firstWhereOrNull(
        (device) => device.deviceId == savedAudioInputId
      ) ?? audioInputs.first;
    } else if (audioInputs.isNotEmpty) {
      selectedAudioInput.value = audioInputs.first;
    }
    
    if (savedVideoInputId != null && videoInputs.isNotEmpty) {
      selectedVideoInput.value = videoInputs.firstWhereOrNull(
        (device) => device.deviceId == savedVideoInputId
      ) ?? videoInputs.first;
    } else if (videoInputs.isNotEmpty) {
      selectedVideoInput.value = videoInputs.first;
    }
    
    if (savedAudioOutputId != null && audioOutputs.isNotEmpty) {
      selectedAudioOutput.value = audioOutputs.firstWhereOrNull(
        (device) => device.deviceId == savedAudioOutputId
      ) ?? audioOutputs.first;
    } else if (audioOutputs.isNotEmpty) {
      selectedAudioOutput.value = audioOutputs.first;
    }
  }
  
  /// Set audio input device
  Future<void> setAudioInput(webrtc.MediaDeviceInfo device) async {
    selectedAudioInput.value = device;
    
    // Save to storage
    _storageService.write(AppConstants.keySelectedAudioInput, device.deviceId);
    
    // Apply to current call if exists - this requires advanced WebRTC handling
    if (currentCall.value != null) {
      try {
        debugPrint('Attempting to change microphone to: ${device.label}');
        final call = currentCall.value!;
        
        // In a real implementation, you would access the RTCPeerConnection
        // and replace the audio track with a new one from the selected device
        // This is complex and would require direct WebRTC manipulation
        
        // Note: If the call object doesn't expose this functionality directly,
        // you'd need to implement a workaround or live with changing devices
        // only for new calls.
      } catch (e) {
        debugPrint('Error changing microphone: $e');
      }
    }
  }
  
  /// Set video input device
  Future<void> setVideoInput(webrtc.MediaDeviceInfo device) async {
    selectedVideoInput.value = device;
    
    // Save to storage
    _storageService.write(AppConstants.keySelectedVideoInput, device.deviceId);
    
    // Apply to current call if exists
    if (currentCall.value != null) {
      try {
        debugPrint('Attempting to change camera to: ${device.label}');
        final call = currentCall.value!;
        
        // Similar to audio input, this would require direct WebRTC manipulation
        // to replace the video track
      } catch (e) {
        debugPrint('Error changing camera: $e');
      }
    }
  }
  
  /// Set audio output device
  Future<void> setAudioOutput(webrtc.MediaDeviceInfo device) async {
    selectedAudioOutput.value = device;
    
    // Save to storage
    _storageService.write(AppConstants.keySelectedAudioOutput, device.deviceId);
    
    // Apply to current call if exists
    if (currentCall.value != null) {
      try {
        debugPrint('Attempting to change speaker to: ${device.label}');
        // This would involve setting the sink ID on the audio element
        // in WebRTC, which requires platform-specific handling
      } catch (e) {
        debugPrint('Error changing speaker: $e');
      }
    }
  }
  
  /// Set server host
  void setServerHost(String host) {
    serverHost.value = host;
    _storageService.write(AppConstants.keySipServerHost, host);
    
    // Re-register if already registered
    if (isRegistered.value) {
      unregister();
      Future.delayed(Duration(milliseconds: 500), () {
        register();
      });
    }
  }
  
  /// Enable or disable SIP
  void setEnabled(bool value) {
    enabled.value = value;
    _storageService.write(AppConstants.keySipEnabled, value);
    
    if (value && !isRegistered.value) {
      register();
    } else if (!value && isRegistered.value) {
      unregister();
    }
  }
  
  // Implementation of SipUaHelperListener methods
  
  @override
  void registrationStateChanged(RegistrationState state) {
    debugPrint('Registration state: ${state.state}');
    
    if (state.state == RegistrationStateEnum.REGISTERED) {
      isRegistered.value = true;
      debugPrint('SIP UA registered successfully');
    } else if (state.state == RegistrationStateEnum.UNREGISTERED) {
      isRegistered.value = false;
      debugPrint('SIP UA unregistered. Cause: ${state.cause}');
    } else if (state.state == RegistrationStateEnum.REGISTRATION_FAILED) {
      isRegistered.value = false;
      lastError.value = 'Registration failed: ${state.cause}';
      debugPrint('SIP UA registration failed: ${state.cause}');
    }
  }
  
  @override
  void callStateChanged(Call call, CallState state) {
    debugPrint('Call state changed: ${state.state}');
    callState.value = state.state.toString();
    
    if (state.state == CallStateEnum.CALL_INITIATION) {
      currentCall.value = call;
      // Reset state when starting a new call
      isCallMuted.value = false;
      isLocalVideoEnabled.value = true;
    } else if (state.state == CallStateEnum.ENDED) {
      currentCall.value = null;
      // Reset state when call ends
      isCallMuted.value = false;
      isLocalVideoEnabled.value = true;
    }
  }

  @override
  void transportStateChanged(TransportState state) {
    debugPrint('Transport state: ${state.state}');
  }
  
  @override
  void onNewMessage(SIPMessageRequest msg) {
    debugPrint('New SIP message received');
  }

  @override
  void onNewNotify(Notify notify) {
    debugPrint('New SIP notification received');
  }
  
  @override
  void onNewReinvite(ReInvite event) {
    debugPrint('New SIP re-invite received');
  }
  
  // Call handling methods
  
  /// Make a call to a SIP address
  Future<bool> makeCall(String target, {bool video = false}) async {
    if (!isRegistered.value) {
      lastError.value = 'Not registered with SIP server';
      return false;
    }
    
    try {
      final mediaConstraints = <String, dynamic>{
        'audio': true,
        'video': video,
      };
      
      // Add device constraints if selected
      if (selectedAudioInput.value != null) {
        mediaConstraints['audio'] = {
          'deviceId': {'exact': selectedAudioInput.value!.deviceId},
        };
      }
      
      if (video && selectedVideoInput.value != null) {
        mediaConstraints['video'] = {
          'deviceId': {'exact': selectedVideoInput.value!.deviceId},
          'width': {'ideal': 1280},
          'height': {'ideal': 720},
        };
      }
      
      final customOptions = <String, dynamic>{
        'mediaConstraints': mediaConstraints,
        'pcConfig': {
          'iceServers': [
            {'urls': 'stun:stun.l.google.com:19302'},
          ],
        },
      };
      
      final result = await _helper.call(
        target,
        voiceOnly: !video,
        customOptions: customOptions
      );
      
      // Call object will be assigned in callStateChanged callback
      return result;
    } catch (e) {
      lastError.value = 'Call failed: $e';
      return false;
    }
  }
  
  /// End the current call
  void hangUp() {
    if (currentCall.value != null) {
      try {
        currentCall.value!.hangup();
        currentCall.value = null;
        
        // Reset mute and video states
        isCallMuted.value = false;
        isLocalVideoEnabled.value = true;
      } catch (e) {
        lastError.value = 'Hangup failed: $e';
      }
    }
  }
  
  /// Mute/unmute the current call
  void toggleMute() {
    if (currentCall.value == null) return;
    
    try {
      final call = currentCall.value!;
      if (isCallMuted.value) {
        call.unmute();
        isCallMuted.value = false;
        debugPrint('Microphone unmuted');
      } else {
        call.mute();
        isCallMuted.value = true;
        debugPrint('Microphone muted');
      }
    } catch (e) {
      lastError.value = 'Toggle mute failed: $e';
      debugPrint('Error toggling mute: $e');
    }
  }
  
  /// Enable/disable video on the current call
  void toggleVideo() {
    if (currentCall.value == null) return;
    
    try {
      final call = currentCall.value!;
      
      // Toggle our internal state
      isLocalVideoEnabled.value = !isLocalVideoEnabled.value;
      
      // If there's a session with local stream, try to enable/disable video tracks
      if (call.session != null && call.session!.localStream != null) {
        final videoTracks = call.session!.localStream!.getVideoTracks();
        for (var track in videoTracks) {
          track.enabled = isLocalVideoEnabled.value;
        }
        
        debugPrint('Video ${isLocalVideoEnabled.value ? 'enabled' : 'disabled'}');
      } else {
        debugPrint('Could not toggle video: No active video stream');
      }
    } catch (e) {
      lastError.value = 'Toggle video failed: $e';
      debugPrint('Error toggling video: $e');
    }
  }
}
